name: Java CI with Maven

on:
  push:
    branches: [ "prod" ]
  pull_request:
    branches: [ "prod" ]

jobs:
  pull_request_steps:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Checkout code
      run: echo "Code checkout completed successfully."

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Confirm JDK Setup
      run: echo "JDK 21 setup completed successfully."

    - name: Build with Maven and Extract JAR Name
      id: build
      run: |
        mvn -B package --file pom.xml
        JAR_NAME=$(ls target/*.jar | xargs -n 1 basename)
        echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV
        echo "Maven build completed successfully and JAR_NAME is $JAR_NAME."

  merge_steps:
    if: github.event_name == 'push' && github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest

    env:
      SSH_HOST: ${{ secrets.VPS_SSH_HOST }}
      SSH_USER: ${{ secrets.VPS_SSH_USER }}
      REMOTE_DIR: ${{ secrets.VPS_REMOTE_DIR}}
      SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
    - uses: actions/checkout@v4
    - name: Checkout code
      run: echo "Code checkout completed successfully."

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Confirm JDK Setup
      run: echo "JDK 21 setup completed successfully."

    - name: Build with Maven and Extract JAR Name
      id: build
      run: |
        mvn -B package --file pom.xml
        JAR_NAME=$(ls target/*.jar | xargs -n 1 basename)
        echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV
        echo "Maven build completed successfully and JAR_NAME is $JAR_NAME."

    - name: Retrieve Repository Name
      id: repo
      run: |
        REPO_NAME=$(basename $GITHUB_REPOSITORY)
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
        echo "Repository name is $REPO_NAME."

    - name: Generate Git Build Info File
      run: |
        echo "Commit Hash: $(git rev-parse HEAD)" > $REPO_NAME.txt
        echo "Branch: $(git rev-parse --abbrev-ref HEAD)" >> $REPO_NAME.txt
        echo "Git Tag: $(git describe --tags --abbrev=0 2>/dev/null)" >> $REPO_NAME.txt
        echo "Built By: ${{ github.actor }}" >> $REPO_NAME.txt
        echo "Build Number: ${{ github.run_number }}" >> $REPO_NAME.txt
        echo "Build Date: $(date)" >> $REPO_NAME.txt
        echo "Project Version: $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $REPO_NAME.txt
        echo "Generated $REPO_NAME.txt with Git details."

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add SSH key to known_hosts
      run: ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts

    - name: Copy JAR and Build Info to VPS
      run: |
        scp target/${{ env.JAR_NAME }} $SSH_USER@$SSH_HOST:$REMOTE_DIR/jars/$REPO_NAME
        scp $REPO_NAME.txt $SSH_USER@$SSH_HOST:$REMOTE_DIR/jars/$REPO_NAME
        echo "JAR - ${{ env.JAR_NAME }} and $REPO_NAME.txt copied to VPS successfully."

    - name: Stop existing service on VPS
      run: ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "$REMOTE_DIR/scripts/stop_service.sh ${{ env.JAR_NAME }}" || true

    - name: Start new service on VPS
      run: ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "nohup java -jar $REMOTE_DIR/jars/$REPO_NAME/${{ env.JAR_NAME }} --spring.profiles.active=prod > $REMOTE_DIR/jars/$REPO_NAME/$REPO_NAME.log 2>&1 &"

    - name: Confirm Service Start
      run: echo "New service started successfully on VPS."
