openapi: 3.0.3
info:
  title: CV Auth Service API
  description: API for Authentication Service that provides login functionality and returns JWT tokens.
  version: 1.0.0
  contact:
    name: Support Team
    email: support@chavdarvishranti.com
servers:
  - url: http://localhost:8072/cv-owner
    description: Local server

paths:
  /owner/register:
    post:
      summary: Register a new Owner
      description: Register a new Owner with Ownername, password, and email.
      operationId: registerOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerRegisterRequest'
      responses:
        '201':
          description: Owner registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - invalid input format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Conflict - Owner already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Owner already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /owner/owners:
    get:
      summary: Get all owners
      description: get all owners data from db.
      operationId: getAllOwners
      responses:
        '200':
          description: owners successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - invalid input format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /owner/{id}:
    get:
      summary: Get owner by id
      description: get owner data from db.
      operationId: getOwnerById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the owner to retrieve
          schema:
            type: string
      responses:
        '200':
          description: owner successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - invalid input format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update owner by id
      description: Update existing owner details.
      operationId: updateOwner
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the owner to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerUpdateRequest'
      responses:
        '200':
          description: Owner updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - invalid input format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Owner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete owner by id
      description: Delete an owner from the database using their ID.
      operationId: disableOwner
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the owner to delete
          schema:
            type: string
      responses:
        '200':
          description: Owner deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - invalid input format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Owner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    OwnerRegisterRequest:
      type: object
      properties:
        username:
          type: string
          example: "sharad@example.com"
        name:
          type: string
          example: "sharad"
        mobile:
          type: string
          example: "0987654321"
        userRole:
          type: string
          enum:
            - ADMIN
            - OWNER
          example: OWNER
      required:
        - username
        - password
        - userRole

    OwnerUpdateRequest:
      type: object
      properties:

        name:
          type: string
          example: "sharad"
        mobile:
          type: string
          example: "0987654321"
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation successful"
        data:
          type: object
          x-java-type: Object
        timestamp:
          type: string
          format: date-time
          example: "2024-09-14T15:00:00Z"
      required:
        - message
        - timestamp
      description: |
        This schema represents a successful API response. 
        **Constructor**:
        ```
        public SuccessResponse(String message, Object data) {
            this.message = message;
            this.data = data;
            this.timestamp = LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME);
        }
        ```

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Invalid input format"
        timestamp:
          type: string
          format: date-time
          example: "2024-09-14T15:00:00Z"
        status:
          type: integer
          example: 400
      required:
        - message
        - timestamp
        - status

security:
  - bearerAuth: []

tags:
  - name: Auth
    description: Authentication related endpoints
